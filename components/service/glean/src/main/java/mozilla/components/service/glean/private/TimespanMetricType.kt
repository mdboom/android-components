/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.components.service.glean.private

import android.support.annotation.VisibleForTesting
import mozilla.components.service.glean.Dispatchers
import mozilla.components.service.glean.Timespan
import mozilla.components.service.glean.error.ErrorRecording
import mozilla.components.service.glean.error.ErrorRecording.recordError
import mozilla.components.service.glean.storages.TimespansStorageEngine
import mozilla.components.support.base.log.logger.Logger

/**
 * This implements the developer facing API for recording timespans.
 *
 * Instances of this class type are automatically generated by the parsers at build time,
 * allowing developers to record values that were previously registered in the metrics.yaml file.
 *
 * The timespans API exposes the [start], [stopAndSum] and [cancel] methods.
 */
data class TimespanMetricType(
    override val disabled: Boolean,
    override val category: String,
    override val lifetime: Lifetime,
    override val name: String,
    override val sendInPings: List<String>,
    val timeUnit: TimeUnit
) : CommonMetricData {

    override val defaultStorageDestinations: List<String> = listOf("metrics")

    private val logger = Logger("glean/TimespanMetricType")

    /**
     * Start tracking time for the provided metric, and return a [Timespan] object.
     *
     * @return Call [Timespan.stop()] on the returned object to stop tracking time.
     */
    fun start(): Timespan {
        return Timespan(
            { timespan ->
                if (shouldRecord(logger)) {
                    @Suppress("EXPERIMENTAL_API_USAGE")
                    Dispatchers.API.launch {
                        TimespansStorageEngine.stopAndSum(
                            this@TimespanMetricType,
                            timeUnit,
                            timespan
                        )
                    }
                }
            },
            {
                recordError(
                    this@TimespanMetricType,
                    ErrorRecording.ErrorType.InvalidValue,
                    "Timespan stopped twice",
                    logger
                )
            }
        )
    }

    /**
     * Tests whether a value is stored for the metric for testing purposes only
     *
     * @param pingName represents the name of the ping to retrieve the metric for.  Defaults
     *                 to the either the first value in [defaultStorageDestinations] or the first
     *                 value in [sendInPings]
     * @return true if metric value exists, otherwise false
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    fun testHasValue(pingName: String = getStorageNames().first()): Boolean {
        return TimespansStorageEngine.getSnapshot(pingName, false)?.get(identifier) != null
    }

    /**
     * Returns the stored value for testing purposes only
     *
     * @param pingName represents the name of the ping to retrieve the metric for.  Defaults
     *                 to the either the first value in [defaultStorageDestinations] or the first
     *                 value in [sendInPings]
     * @return value of the stored metric
     * @throws [NullPointerException] if no value is stored
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    fun testGetValue(pingName: String = getStorageNames().first()): Long {
        return TimespansStorageEngine.getSnapshot(pingName, false)!![identifier]!!
    }
}
